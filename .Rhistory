p_x = matrix(c(0.09, 0.2475, 0.1125, 0.05,
0.1375, 0.0625, 0.04, 0.11,
0.05, 0.02,0.055, 0.025),4,1)
p_x = matrix(c(0.09, 0.2475, 0.1125, 0.05,
0.1375, 0.0625, 0.04, 0.11,
0.05, 0.02,0.055, 0.025),12,1)
n = 300
p_y = matrix(c(0.09, 0.2475, 0.1125, 0.05,
0.1375, 0.0625, 0.04, 0.11,
0.05, 0.02,0.055, 0.025),12,1)
EY = n*p_y
EY
# f.
# Yv,a ~ Binomial(n = 300, pv,a = 0.1375)
# E(Yv,a)
300*0.1375
p_x = matrix(c(0.45, 0.25, 0.20, 0.10),4,1)
n = 300
mu_X = n*p_x
mu_X
sigma2_1 = n*p1*(1-p1)
n = 300
p1 = 0.45
p2 = 0.25
p3 = 0.20
p4 = 0.10
sigma2_1 = n*p1*(1-p1)
sigma2_2 = n*p2*(1-p2)
sigma2_3 = n*p3*(1-p3)
sigma2_4 = n*p4*(1-p4)
covX1X2 = -n*p1*p2
covX1X3 = -n*p1*p3
covX1X4 = -n*p1*p4
covX2X1 = covX1X2
covX2X3 = -n*p2*p3
covX2X4 = -n*p2*p4
covX3X1 = covX1X3
covX3X2 = covX2X3
covX3X4 = -n*p3*p4
covX4X1 = covX1X4
covX4X2 = covX2X4
covX4X3 = covX3X4
sigma = matrix(c(sigma2_1,covX1X2,covX1X3,covX1X4,
covX2X1,sigma2_2,covX2X3,covX2X4,
covX3X1,covX3X2,sigma2_3,covX3X4,
covX4X1,covX4X2,covX4X3,sigma2_4),
4,4)
sigma
# c.
# P(Xc = 135, Xv = 75, Xh = 60, Xe = 30)
dmultinom(c(135,75,60,30),300,c(0.45,0.25,0.20,0.10))
# d.
# X2 ~ Binomial(n = 300, p2 = 0.25)
# E(X2) = np2 =
300*0.25
# e.
# P(X2 <= 70)
pbinom(70, 300,0.25)
A = matrix(c(200,250,400,150),1,4)
p_x = matrix(c(0.45, 0.25, 0.20, 0.10),4,1)
n = 300
mu_X = n*p_x
A%*%mu_X
A = matrix(c(80,100,150,60),1,4)
p_x = matrix(c(0.45, 0.25, 0.20, 0.10),4,1)
n = 300
mu_X = n*p_x
A%*%mu_X
# V(Utilidad)
A%*%sigma%*%t(A)
# Desviación Estándar
sqrt(249300)
shiny::runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
## -----------------------------
## Simulación del TLC en R base
## -----------------------------
set.seed(123)           # Reproducibilidad
# Parámetros
n    <- 30              # tamaño de muestra por repetición
reps <- 10000           # número de repeticiones
lambda <- 1             # parámetro de la Exponencial (tasa)
# Población NO normal: Exponencial(λ)
# Generamos medias muestrales: Xbar_i = mean(X_i1, ..., X_in)
xbar <- replicate(reps, mean(rexp(n, rate = lambda)))
# Parámetros teóricos de la media muestral bajo TLC
mu_pop    <- 1 / lambda          # media poblacional de Exp(λ)
sd_pop    <- 1 / lambda          # desvío poblacional de Exp(λ)
sd_xbar   <- sd_pop / sqrt(n)    # desvío de la media muestral
# Histograma + ajuste normal teórico + densidad empírica
hist(xbar,
breaks = "FD",
freq   = FALSE,             # escala de densidad
col    = "lightgray",
border = "white",
main   = sprintf("TLC con Exponencial(λ=%g): medias de tamaño n=%d (reps=%d)", lambda, n, reps),
xlab   = "Media muestral")
# Densidad empírica (kernel)
lines(density(xbar), lwd = 2, lty = 2)
# Curva Normal teórica ~ N(mu_pop, sd_xbar^2)
curve(dnorm(x, mean = mu_pop, sd = sd_xbar),
add = TRUE, lwd = 2)
# Marcas en el eje
rug(xbar, col = "gray40")
# Leyenda
legend("topright",
legend = c("Densidad empírica", "Ajuste Normal teórico"),
lty    = c(2, 1),
lwd    = 2,
bty    = "n")
# (Opcional) Chequeo rápido numérico
c(
media_empirica   = mean(xbar),
media_teorica    = mu_pop,
sd_empirica      = sd(xbar),
sd_teorica       = sd_xbar
)
load(file.choose())
# a.
quantile(estudiantes$Matematica, 0.90)
# b.
Fn = ecdf(estudiantes$Comunicacion)
Fn(14)
1 - Fn(14)
Fn(14)
1 - Fn(14)
# c.
Aprobados = estudiantes[estudiantes$Matematica >= 10.5,]
boxplot(Aprobados$Asistencia ~ Aprobados$Sexo, horizontal = T)
by(Aprobados$Asistencia,Aprobados$Sexo,summary)
by(Aprobados$Asistencia,Aprobados$Sexo,summary)
# d.
boxplot(estudiantes$Comunicacion, horizontal = T)
# d.
boxplot(estudiantes$Comunicacion)$out
# d.
b = boxplot(estudiantes$Comunicacion)
length(b$out)/length(estudiantes$Comunicacion)
1 - length(b$out)/length(estudiantes$Comunicacion)
(1 - length(b$out)/length(estudiantes$Comunicacion))*100
Q1 = quantile(estudiantes$Comunicacion, 0.25)
Q3 = quantile(estudiantes$Comunicacion, 0.75)
atipicos = sum(estudiantes$Comunicacion < LI) + sum(estudiantes$Comunicacion > LS)
Q1 = quantile(estudiantes$Comunicacion, 0.25)
Q3 = quantile(estudiantes$Comunicacion, 0.75)
RIC = Q3 - Q1
LI = Q1 - 1.5*RIC
LS = Q3 + 1.5*RIC
atipicos = sum(estudiantes$Comunicacion < LI) + sum(estudiantes$Comunicacion > LS)
(1 - length(atipicos)/length(estudiantes$Comunicacion))*100
length(b$out)
(1 - atipicos/length(estudiantes$Comunicacion))*100
Q1 = quantile(estudiantes$Comunicacion, 0.25)
Q3 = quantile(estudiantes$Comunicacion, 0.75)
RIC = Q3 - Q1
LI = Q1 - 1.5*RIC
LS = Q3 + 1.5*RIC
Q1 = quantile(estudiantes$Matematica, 0.25)
Q3 = quantile(estudiantes$Matematica, 0.75)
RIC = Q3 - Q1
LI = Q1 - 1.5*RIC
LS = Q3 + 1.5*RIC
Tipicos = estudiantes[(estudiantes$Matematica < LI) & (estudiantes$Matematica > LS), ]
cor(Tipicos$Asistencia, Tipicos$Matematica)
Tipicos$Asistencia
Tipicos = estudiantes[(estudiantes$Matematica < LI) & (estudiantes$Matematica > LS), ]
Q1 = quantile(estudiantes$Matematica, 0.25)
Q3 = quantile(estudiantes$Matematica, 0.75)
RIC = Q3 - Q1
LI = Q1 - 1.5*RIC
LS = Q3 + 1.5*RIC
Tipicos = estudiantes[(estudiantes$Matematica < LI) & (estudiantes$Matematica > LS), ]
Tipicos = estudiantes[(estudiantes$Matematica > LI) & (estudiantes$Matematica < LS), ]
cor(Tipicos$Asistencia, Tipicos$Matematica)
# e.
cor(estudiantes$Asistencia, estudiantes$Matematica)
# g.
model1 = lm(estudiantes$Matematica ~ estudiantes$Edad)
# g.
model1 = lm(Matematica ~ Edad, estudiantes)
model2 = lm(Matematica ~ Asistencia, estudiantes)
View(Aprobados)
model1 = lm(Matematica ~ Edad, estudiantes)
model2 = lm(Matematica ~ Asistencia, estudiantes)
model3 = lm(Matematica ~ Comunicacion, estudiantes)
errores_modelo1 = estudiantes$Matematica - predict(model1,estudiantes)
errores_modelo2 = estudiantes$Matematica - predict(model2,estudiantes)
errores_modelo1 = estudiantes$Matematica - predict(model1,estudiantes)
errores_modelo2 = estudiantes$Matematica - predict(model2,estudiantes)
errores_modelo3 = estudiantes$Matematica - predict(model3,estudiantes)
sum(errores_modelo1^2)
sum(errores_modelo1^2)
sum(errores_modelo2^2)
sum(errores_modelo3^2)
sum(errores_modelo3^2)
View(estudiantes)
View(model1)
summary(model1)
summary(model2)
summary(model3)
# f.
by(estudiantes$Comunicacion,estudiantes$Convivencia,summary)
by(estudiantes$Comunicacion,estudiantes$Convivencia,IQR)
Pearson = function(x) 3*(mean(x) - median(x))/sd(x)
Pearson.asi = function(x) 3*(mean(x) - median(x))/sd(x)
by(estudiantes$Comunicacion,estudiantes$Convivencia,Pearson.asi)
boxplot(estudiantes$Comunicacion ~ estudiantes$Convivencia, horizontal = T)
by(estudiantes$Comunicacion,estudiantes$Convivencia,sd)
#################### Turno 3-5
# a.
quantile(estudiantes$Matematica, 0.30)
#################### Turno 3-5
# a.
quantile(estudiantes$Comunicacion, 0.30)
# b.
Fn = ecdf(estudiantes$Matematica)
# b.
Fn = ecdf(estudiantes$Comunicacion)
Fn(13)
# b.
Fn = ecdf(estudiantes$Comunicacion)
Fn(13)
# 0.9183333
1 - Fn(13)
# c.
Aprobados = estudiantes[estudiantes$Matematica >= 10.5,]
Fn = ecdf(estudiantes$Matematica)
Fn(13)
# b.
Fn = ecdf(estudiantes$Matematica)
Fn(13)
Fn = ecdf(estudiantes$Comunicacion)
Fn(13)
# c.
Desaprobados = estudiantes[estudiantes$Comunicacion < 10.5,]
prop.table(table(Desaprobados$Convivencia, Desaprobados$Sexo))
prop.table(table(Desaprobados$Convivencia, Desaprobados$Sexo),1)
prop.table(table(Desaprobados$Convivencia, Desaprobados$Sexo),2)
load(file.choose())
#################### Turno 3-5
# a.
quantile(estudiantes$Comunicacion, 0.30)
# b.
Fn = ecdf(estudiantes$Matematica)
Fn(13)
Fn = ecdf(estudiantes$Comunicacion)
Fn(13)
# c.
Desaprobados = estudiantes[estudiantes$Comunicacion < 10.5,]
prop.table(table(Desaprobados$Convivencia, Desaprobados$Sexo),2)
model1 = lm(Comunicacion ~ Edad, estudiantes)
model2 = lm(Comunicacion ~ Asistencia, estudiantes)
model3 = lm(Comunicacion ~ Matematica, estudiantes)
errores_modelo1 = estudiantes$Comunicacion - predict(model1,estudiantes)
errores_modelo2 = estudiantes$Comunicacion - predict(model2,estudiantes)
errores_modelo3 = estudiantes$Comunicacion - predict(model3,estudiantes)
sum(errores_modelo1^2) # 14012.1
sum(errores_modelo2^2) # 13634.69
sum(errores_modelo3^2) # 12489.47
# e.
cor(estudiantes$Edad, estudiantes$Matematica)
# e.
cor(estudiantes$Edad, estudiantes$Matematica)
Q1 = quantile(estudiantes$Matematica, 0.25)
Q3 = quantile(estudiantes$Matematica, 0.75)
RIC = Q3 - Q1
LI = Q1 - 1.5*RIC
LS = Q3 + 1.5*RIC
Tipicos = estudiantes[(estudiantes$Matematica > LI) & (estudiantes$Matematica < LS), ]
cor(Tipicos$Edad, Tipicos$Matematica)
# e.
plot(estudiantes$Edad, estudiantes$Matematica)
plot(Tipicos$Edad, Tipicos$Matematica)
plot(Tipicos$Edad, Tipicos$Matematica)
cor(estudiantes$Edad, estudiantes$Matematica)
# d.
# Método 1
b = boxplot(estudiantes$Matematica)
(1 - length(b$out)/length(estudiantes$Matematica))*100
# Método 2
Q1 = quantile(estudiantes$Matematica, 0.25)
Q3 = quantile(estudiantes$Matematica, 0.75)
RIC = Q3 - Q1
LI = Q1 - 1.5*RIC
LS = Q3 + 1.5*RIC
atipicos = sum(estudiantes$Matematica < LI) + sum(estudiantes$Matematica > LS)
(1 - atipicos/length(estudiantes$Matematica))*100
(atipicos/length(estudiantes$Matematica))*100
(length(b$out)/length(estudiantes$Matematica))*100
# f.
by(estudiantes$Matematica,estudiantes$Asistencia,summary)
prop.table(table(estudiantes$Frecuencia, estudiantes$Sexo),2)
prop.table(table(estudiantes$Frecuencia, estudiantes$Sexo),1)
prop.table(table(Desaprobados$Convivencia, Desaprobados$Sexo),1)
# f.
by(estudiantes$Matematica,estudiantes$Frecuencia,summary)
by(estudiantes$Matematica,estudiantes$Frecuencia,IQR)
by(estudiantes$Matematica,estudiantes$Frecuencia,sd)
Pearson.asi = function(x) 3*(mean(x) - median(x))/sd(x)
by(estudiantes$Matematica,estudiantes$Frecuencia, Pearson.asi)
boxplot(estudiantes$Matematica ~ estudiantes$Frecuencia, horizontal = T)
boxplot(estudiantes$Matematica ~ estudiantes$Frecuencia, horizontal = T)
quantile(estudiantes$Comunicacion, 0.30)
Fn(13)
Fn(13)
Fn(13)
Fn = ecdf(estudiantes$Comunicacion)
Fn(13)
Fn = ecdf(estudiantes$Matematica)
Fn(13)
Fn = ecdf(estudiantes$Comunicacion)
Fn(13)
Desaprobados = estudiantes[estudiantes$Comunicacion < 10.5,]
prop.table(table(Desaprobados$Convivencia, Desaprobados$Sexo),1)
(length(b$out)/length(estudiantes$Matematica))*100
# Método 1
b = boxplot(estudiantes$Matematica)
(length(b$out)/length(estudiantes$Matematica))*100
# Método 1
b = boxplot(estudiantes$Matematica, plot = F)
(length(b$out)/length(estudiantes$Matematica))*100
load("estudiantes.RData")
quantile(estudiantes$Matematica, 0.90)
Fn = ecdf(estudiantes$Comunicacion)
1 - Fn(13)
Fn = ecdf(estudiantes$Matematica)
Fn(13)
Aprobados = estudiantes[estudiantes$Matematica >= 10.5,]
prop.table(table(estudiantes$Frecuencia, estudiantes$Sexo),1)
# Método 1
b = boxplot(estudiantes$Comunicacion, plot = F)
(1 - length(b$out)/length(estudiantes$Comunicacion))*100
# Método 2
Q1 = quantile(estudiantes$Comunicacion, 0.25)
Q3 = quantile(estudiantes$Comunicacion, 0.75)
RIC = Q3 - Q1
LI = Q1 - 1.5*RIC
LS = Q3 + 1.5*RIC
atipicos = sum(estudiantes$Comunicacion < LI) + sum(estudiantes$Comunicacion > LS)
(1 - atipicos/length(estudiantes$Comunicacion))*100
cor(estudiantes$Asistencia, estudiantes$Matematica)
Q1 = quantile(estudiantes$Matematica, 0.25)
Q3 = quantile(estudiantes$Matematica, 0.75)
RIC = Q3 - Q1
LI = Q1 - 1.5*RIC
LS = Q3 + 1.5*RIC
Tipicos = estudiantes[(estudiantes$Matematica > LI) & (estudiantes$Matematica < LS), ]
cor(Tipicos$Asistencia, Tipicos$Matematica)
by(estudiantes$Comunicacion,estudiantes$Convivencia,summary)
by(estudiantes$Comunicacion,estudiantes$Convivencia,IQR)
by(estudiantes$Comunicacion,estudiantes$Convivencia,sd)
Pearson.asi = function(x) 3*(mean(x) - median(x))/sd(x)
by(estudiantes$Comunicacion,estudiantes$Convivencia,Pearson.asi)
boxplot(estudiantes$Comunicacion ~ estudiantes$Convivencia, horizontal = T)
model1 = lm(Matematica ~ Edad, estudiantes)
model2 = lm(Matematica ~ Asistencia, estudiantes)
model3 = lm(Matematica ~ Comunicacion, estudiantes)
errores_modelo1 = estudiantes$Matematica - predict(model1,estudiantes)
errores_modelo2 = estudiantes$Matematica - predict(model2,estudiantes)
errores_modelo3 = estudiantes$Matematica - predict(model3,estudiantes)
sum(errores_modelo1^2)
sum(errores_modelo2^2)
sum(errores_modelo3^2)
quantile(estudiantes$Comunicacion, 0.30)
Fn = ecdf(estudiantes$Matematica)
Fn(13)
Fn = ecdf(estudiantes$Comunicacion)
Fn(13)
Desaprobados = estudiantes[estudiantes$Comunicacion < 10.5,]
prop.table(table(Desaprobados$Convivencia, Desaprobados$Sexo),1)
# Método 1
b = boxplot(estudiantes$Matematica, plot = F)
(length(b$out)/length(estudiantes$Matematica))*100
# Método 2
Q1 = quantile(estudiantes$Matematica, 0.25)
Q3 = quantile(estudiantes$Matematica, 0.75)
RIC = Q3 - Q1
LI = Q1 - 1.5*RIC
LS = Q3 + 1.5*RIC
atipicos = sum(estudiantes$Matematica < LI) + sum(estudiantes$Matematica > LS)
(atipicos/length(estudiantes$Matematica))*100
cor(estudiantes$Edad, estudiantes$Matematica)
Q1 = quantile(estudiantes$Matematica, 0.25)
Q3 = quantile(estudiantes$Matematica, 0.75)
RIC = Q3 - Q1
LI = Q1 - 1.5*RIC
LS = Q3 + 1.5*RIC
Tipicos = estudiantes[(estudiantes$Matematica > LI) & (estudiantes$Matematica < LS), ]
cor(Tipicos$Edad, Tipicos$Matematica)
by(estudiantes$Matematica,estudiantes$Frecuencia,summary)
by(estudiantes$Matematica,estudiantes$Frecuencia,IQR)
by(estudiantes$Matematica, estudiantes$Frecuencia,sd)
Pearson.asi = function(x) 3*(mean(x) - median(x))/sd(x)
by(estudiantes$Matematica, estudiantes$Frecuencia, Pearson.asi)
boxplot(estudiantes$Matematica ~ estudiantes$Frecuencia, horizontal = T)
model1 = lm(Comunicacion ~ Edad, estudiantes)
model2 = lm(Comunicacion ~ Asistencia, estudiantes)
model3 = lm(Comunicacion ~ Matematica, estudiantes)
errores_modelo1 = estudiantes$Comunicacion - predict(model1,estudiantes)
errores_modelo2 = estudiantes$Comunicacion - predict(model2,estudiantes)
errores_modelo3 = estudiantes$Comunicacion - predict(model3,estudiantes)
sum(errores_modelo1^2)
sum(errores_modelo2^2)
sum(errores_modelo3^2)
Fn(13)*100
Fn = ecdf(estudiantes$Matematica)
Fn(13)*100
Fn = ecdf(estudiantes$Comunicacion)
Fn(13)*100
Fn = ecdf(estudiantes$Comunicacion)
(1 - Fn(13))*100
Fn = ecdf(estudiantes$Matematica)
Fn(13)*100
Fn = ecdf(estudiantes$Comunicacion)
1 - Fn(13)
Aprobados = estudiantes[estudiantes$Matematica >= 10.5,]
prop.table(table(estudiantes$Frecuencia, estudiantes$Sexo),1)
tinytex::install_tinytex()
choose(23,0)*choose(7,3)/choose(30,3)
# b.
choose(3,1)*choose(4,0)*choose(23,2)/choose(30,3)
# c.
choose(23,1)*choose(7,2)/choose(30,3) +
choose(23,2)*choose(7,1)/choose(30,3) +
choose(23,3)*choose(7,0)/choose(30,3)
# Método 2
f = function(x) choose(23,x)*choose(7,3-x)/choose(30,3)
f(1) + f(2) + f(3)
# Método 3
x = c(1,2,3)
sum(f(x))
# Método 4
1 - choose(23,0)*choose(7,3)/choose(30,3)
# Pregunta 3
# a.
choose(23,0)*choose(7,3)/choose(30,3)
# b.
choose(3,1)*choose(4,0)*choose(23,2)/choose(30,3)
choose(23,1)*choose(7,2)/choose(30,3) +
choose(23,2)*choose(7,1)/choose(30,3) +
choose(23,3)*choose(7,0)/choose(30,3)
# Método 2
f = function(x) choose(23,x)*choose(7,3-x)/choose(30,3)
f(1) + f(2) + f(3)
f = function(x) choose(23,x)*choose(7,3-x)/choose(30,3)
sum(f(x))
# Método 3
x = c(1,2,3)
f = function(x) choose(23,x)*choose(7,3-x)/choose(30,3)
sum(f(x))
# Método 4
1 - choose(23,0)*choose(7,3)/choose(30,3)
# Pregunta 5
# a.
choose(575,3)*choose(13067,0)/choose(13642,3)
# b.
1 - choose(8765,0)*choose(4877,3)/choose(13642,3)
choose(6404,1)*choose(7238,2)/choose(13642,3) +
choose(6404,2)*choose(7238,1)/choose(13642,3)
choose(6404,1)*choose(7238,2)/choose(13642,3) +
choose(6404,2)*choose(7238,1)/choose(13642,3)
choose(575,3)/choose(13642,3)
choose(7,3)/choose(30,3)
# Pregunta 3
# a.
choose(23,0)*choose(7,3)/choose(30,3)
choose(7,3)/choose(30,3)
choose(3,1)*choose(23,2)/choose(30,3)
choose(23,1)*choose(7,2)/choose(30,3) +
choose(23,2)*choose(7,1)/choose(30,3) +
choose(23,3)*choose(7,0)/choose(30,3)
# Método 2
f = function(x) choose(23,x)*choose(7,3-x)/choose(30,3)
f = function(x) choose(23,x)*choose(7,3-x)/choose(30,3)
1 - f(0)
# Pregunta 5
# a.
choose(575,3)*choose(13067,0)/choose(13642,3)
choose(6404,1)*choose(7238,2)/choose(13642,3) +
choose(6404,2)*choose(7238,1)/choose(13642,3)
shiny::runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
