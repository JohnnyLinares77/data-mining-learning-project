datos = read.csv(file.choose())
View(datos)
prop.table(table(datos$institucion))
View(datos)
mayores_60 = datos[datos$edad>60]
mayores_60 = datos[datos$edad>60,]
prop.table(table(mayores_60$institucion))
prop.table(table(mayores_60$citap))
prop.table(table(mayores_60$tatencion))
prop.table(table(mayores_60$tatencion > 10))
# b.
Entre_40y60_incluidos = datos[ datos$edad>= 40 && datos$edad<=60 ,]
# b.
Entre_40y60_incluidos = datos[(datos$edad>=40) && (datos$edad<=60),]
# b.
Entre_40y60_incluidos = datos[(datos$edad>=40) & (datos$edad<=60),]
t = table(Entre_40y60_incluidos$institucion)
t = prop.table(table(Entre_40y60_incluidos$institucion))
barplot(t)
t = table(Entre_40y60_incluidos$institucion)
barplot(prop.table(t), xlab = "Institución", ylab = "Proporción")
t[1]
t
bp = names(t)
nombres = names(t)
proporciones =
barplot(prop.table(t), xlab = "Institución", ylab = "Proporción")
proporciones = prop.table(t)
text(x = nombres, y = proporciones, labels = t,
pos = 3, xpd = NA, cex = 1)
nombres = names(t)
proporciones = prop.table(t)
barplot(prop.table(t), xlab = "Institución", ylab = "Proporción")
text(x = nombres, y = proporciones, labels = t,
pos = 3, xpd = NA, cex = 1)
t = table(Entre_40y60_incluidos$institucion)
prop = prop.table(t)
bp = barplot(prop.table(t), xlab = "Institución", ylab = "Proporción")
text(x = bp, y = prop, labels = t,
pos = 3, xpd = NA, cex = 1)
text(x = bp, y = prop, labels = t)
text(x = bp, y = prop, labels = t, pos = 3)
Entre_40y60_incluidos = datos[(datos$edad>=40) & (datos$edad<=60),]
t = table(Entre_40y60_incluidos$institucion)
prop = prop.table(t)
bp = barplot(prop.table(t), xlab = "Institución", ylab = "Proporción")
text(x = bp, y = prop, labels = t, pos = 3)
text(x = bp, y = prop, labels = t,
pos = 3, xpd = NA, cex = 1)
t = table(Entre_40y60_incluidos$institucion)
prop = prop.table(t)
bp = barplot(prop.table(t),
col = 1:4
ylab = "Proporción")
bp = barplot(prop.table(t),
col = 1:4,
ylab = "Proporción")
text(x = bp, y = prop, labels = t,
pos = 3, xpd = NA, cex = 1)
legend("topright",
legend = names(t),
fill = colores[names(t)],
bty = "n", cex = 1)
legend("topright",
legend = names(t),
fill = 1:4,
bty = "n", cex = 1)
bp = barplot(prop.table(t),
col = 1:4,
ylab = "Proporción",
ylim = c(0,1))
text(x = bp, y = prop, labels = t,
pos = 3, xpd = NA, cex = 1)
legend("topright",
legend = names(t),
fill = 1:4,
bty = "n", cex = 1)
t = table(Entre_40y60_incluidos$institucion)
prop = prop.table(t)
bp = barplot(prop.table(t),
col = 1:4,
ylab = "Proporción",
ylim = c(0,1))
text(x = bp, y = prop, labels = t,
pos = 3, xpd = NA, cex = 1)
legend("topright",
legend = names(t),
fill = 1:4,
bty = "n", cex = 0.6)
bp = barplot(prop.table(t),
col = 1:4,
ylab = "Proporción",
ylim = c(0,1),
axisname = F)
text(x = bp, y = prop, labels = t,
pos = 3, xpd = NA, cex = 1)
legend("topright",
legend = names(t),
fill = 1:4,
bty = "n", cex = 0.6)
?barplot
?legend
?text
datos = read.csv(file.choose())
View(datos)
View(datos)
mayores_60 = datos[datos$edad > 60,]
View(mayores_60)
# 1a.
table(mayores_60$institucion)
# 1a.
prop.table(table(mayores_60$institucion))
# 1c.
prop.table(table(mayores_60$citap))
table(mayores_60$citap)
# 1d.
prop.table(table(mayores_60$tatencion))
# 1d.
# Me interesa la proporción de aquellos que tienen tiempo superior a
# 10 minutos
prop.table(table(mayores_60$tatencion > 10))
# 2.
# Filtramos las personas que tienen una edad entre 40 y 60
# (40 y 60 incluidos) --> 40 <= x <= 60
Entre_40y60 = datos[(datos$edad >= 40) & (datos$edad <= 60),]
# Gráfico Barras
t = table(Entre_40y60$institucion)
t
prop = prop.table(Entre_40y60$institucion)
prop = prop.table(table(Entre_40y60$institucion))
prop
barplot(prop)
barplot(prop,
xlab = "Institución",
ylab = "Proporción",
ylim = c(0,1)
)
barplot(prop,
xlab = "Institución",
ylab = "Proporción",
ylim = c(0,1),
main = "Distribución de institución de pacientes"
)
bp = barplot(prop,
xlab = "Institución",
ylab = "Proporción",
ylim = c(0,1),
main = "Distribución de institución de pacientes"
)
text(x = bp, y = prop, labels = t)
text(x = bp, y = prop, labels = t, pos = 3)
bp = barplot(prop,
xlab = "Institución",
ylab = "Proporción",
ylim = c(0,1),
main = "Distribución de institución de pacientes"
)
text(x = bp, y = prop, labels = t, pos = 3)
# Tipo 1
bp = barplot(prop,
xlab = "Institución",
ylab = "Proporción",
ylim = c(0,1),
main = "Distribución de institución de pacientes"
)
text(x = bp, y = prop, labels = t)
# Tipo 1
bp = barplot(prop,
xlab = "Institución",
ylab = "Proporción",
ylim = c(0,1),
main = "Distribución de institución de pacientes"
)
text(x = bp, y = prop, labels = t, pos = 3)
# Tipo 2
bp = barplot(prop,
ylab = "Proporción",
ylim = c(0,1),
main = "Distribución de institución de pacientes",
axisname = FALSE
)
bp = barplot(prop,
ylab = "Proporción",
ylim = c(0,1),
main = "Distribución de institución de pacientes",
axisname = FALSE
)
text(x = bp, y = prop, labels = t, pos = 3)
bp = barplot(prop,
ylab = "Proporción",
ylim = c(0,1),
main = "Distribución de institución de pacientes",
axisname = FALSE,
col = 1:4
)
text(x = bp, y = prop, labels = t, pos = 3)
t
names(t)
# Tipo 2
bp = barplot(prop,
ylab = "Proporción",
ylim = c(0,1),
main = "Distribución de institución de pacientes",
axisname = FALSE,
col = 1:4
)
text(x = bp, y = prop, labels = t, pos = 3)
legend("topright", legend = names(t), fill = 1:4)
bp = barplot(prop,
ylab = "Proporción",
ylim = c(0,1),
main = "Distribución de institución de pacientes",
axisname = FALSE,
col = 1:4
)
text(x = bp, y = prop, labels = t, pos = 3)
legend("topright", legend = names(t), fill = 1:4,
bty = "n")
# Tipo 2
bp = barplot(prop,
ylab = "Proporción",
ylim = c(0,1),
main = "Distribución de institución de pacientes",
axisname = FALSE,
col = 1:4
)
text(x = bp, y = prop, labels = t, pos = 3)
legend("topright", legend = names(t), fill = 1:4,
bty = "n", cex = 0.6)
prop.table(table(mayores_60$tatencion))
mean(datos$institucion)
mean(datos$edad)
MINSA = datos[datos$institucion == "MINSA",]
View(MINSA)
ESSALUD = datos[datos$institucion == "ESSALUD",]
mean(MINSA$edad)
mean(ESSALUD$edad)
# Forma 2
by(datos$edad, datos$institucion, mean)
# Forma 1
MINSA = datos[datos$institucion == "MINSA",]
ESSALUD = datos[datos$institucion == "ESSALUD",]
# Forma 1
sd(MINSA$edad)
sd(ESSALUD$edad)
# Forma 2
by(datos$edad, datos$institucion, sd)
# 5c.
quantile(datos$edad,0.10)
# 5c.
quantile(datos$edad,0.90)
# 5c.
quantile(datos$edad,0.90)
# 5c.
quantile(MINSA$edad,0.90)
quantile(ESSALUD$edad,0.90)
bp = barplot(prop,
xlab = "Institución",
ylab = "Proporción",
ylim = c(0,1),
main = "Distribución de institución de pacientes"
)
text(x = bp, y = prop, labels = t, pos = 3)
shiny::runApp('Documentos TESIS/Proyecto-Modulos/app')
runApp('Documentos TESIS/Proyecto-Modulos/app')
runApp('Documentos TESIS/Proyecto-Modulos/app')
load(file.choose())
View(mpg)
# a.
autos_manual = mpg[mpg$Transmission.Type == "MANUAL",]
View(autos_manual)
boxplot(autos_manual$Engine.HP, horizontal = T)
Q1 = quantile(autos_manual$Engine.HP,0.25)
Q3 = quantile(autos_manual$Engine.HP,0.75)
RIC = Q3 - Q1
LI = Q1 - 1.5*RIC
LS = Q3 + 1.5*RIC
autos_manual$Engine.HP < LI
sum(autos_manual$Engine.HP < LI)
autos_manual$Engine.HP > LS)
autos_manual$Engine.HP > LS
sum(autos_manual$Engine.HP > LS)
atipicos = sum(autos_manual$Engine.HP < LI) + sum(autos_manual$Engine.HP > LS)
total = length(autos_manual$Engine.HP)
porcentaje = (atipicos/total)*100
porcentaje
# b.
# Como dicen 25%
# Calculamos el Cuantil 25 / Cuartil 1
quantile(mpg$city.mpg,0.25)
boxplot(autos_manual$Engine.HP, horizontal = T)$out
outliers = boxplot(autos_manual$Engine.HP, horizontal = T)$out
length(outliers)
quantile(mpg$city.mpg,0.75)
# c.
autos_traccion_delantera = mpg[mpg$Driven_Wheels == "front wheel drive",]
hist(autos_traccion_delantera$Engine.HP)
density(autos_traccion_delantera$Engine.HP)
plot(density(autos_traccion_delantera$Engine.HP))
desvest = sd(autos_traccion_delantera$Engine.HP)
media = mean(autos_traccion_delantera$Engine.HP)
mediana = median(autos_traccion_delantera$Engine.HP)
desvest = sd(autos_traccion_delantera$Engine.HP)
3*(media - mediana)/desvest
# d.
autos_manual = mpg[mpg$Transmission.Type == "MANUAL",]
mean(autos_manual$Engine.HP)
autos_automatica = mpg[mpg$Transmission.Type == "AUTOMATIC",]
mean(autos_automatica$Engine.HP) # 241.599
by(mpg$Engine.HP,mpg$Transmission.Type,mean)
install.packages("DescTools")
library(DescTools)
install.packages("DescTools")
library(DescTools)
?DescTools
Skew(autos_traccion_delantera$Engine.HP)
??Skew
load(file.choose())
View(ENAHO2019_Ingreso_Norte)
shiny::runApp('GitHub/data-mining-learning-project/www')
data = read.csv(file.choose())
# 9.
# a.
MINSA = data[data$institucion == "MINSA",]
# Proporción de personas que tienen 40 años o menos
fun = ecdf(MINSA$edad)
fun(40)
# b.
MINSA = data[data$institucion == "ESSALUD",]
# b.
ESSALUD = data[data$institucion == "ESSALUD",]
# Proporción de personas que tienen 40 años o menos
# Usamos la función de distribución acumulada empírica
fun = ecdf(ESSALUD$edad)
1 - fun(50)
# c.
library(DescTools)
Skew(MINSA$edad)
# Asimetría según Pearson
3*(mean(MINSA$edad) - median(MINSA$edad))/sd(MINSA$edad)
# Asimetría según Pearson
3*(mean(MINSA$edad) - median(MINSA$edad))/sd(MINSA$edad)
# Asimetría
Pearson.asi = function(x) 3*(mean(x) − median(x))/sd(x)
Fisher.asi = function (x) mean((x − mean(x))^3)/sd(x)^3
# Asimetría
Pearson.asi = function(x) 3*(mean(x) − median(x))/sd(x)
# Asimetría
Pearson.asi = function(x) 3*(mean(x) − median(x))/sd(x)
3*(mean(x) − median(x))/sd(x)
# Asimetría
Pearson.asi = function(x) 3*(mean(x) − median(x))/sd(x)
# Asimetría
Pearson.asi = function(x) 3*(mean(x) - median(x))/sd(x)
Fisher.asi = function(x) mean((x − mean(x))^3)/sd(x)^3
Fisher.asi = function(x) mean((x - mean(x))^3)/sd(x)^3
Pearson.asi(MINSA$edad)
Fisher.asi(MINSA$edad)
Skew(MINSA$edad)
View(data)
Privadas = data[data$institucion == "Clinicas",]
Pearson.asi(Privadas$edad) # -0.002545067
Fisher.asi(Privadas$edad) # 0.06126328
Skew(Privadas$edad) # 0.06126328
# d.
boxplot(MINSA$edad, plot = F)
# d.
boxplot(MINSA$edad, plot = F)$out
# d.
boxplot(MINSA$edad, plot = F)$out
# Por definición
LI = quantile(MINSA$edad, 0.25)
LS = quantile(MINSA$edad, 0.75)
# Por definición
Q1 = quantile(MINSA$edad, 0.25)
Q3 = quantile(MINSA$edad, 0.75)
RIC = Q3 - Q1
LS = Q3 + 1.5*RIC
sum(data$edad < LI) + sum(data$edad > LS)
Q1 = quantile(MINSA$edad, 0.25)
Q3 = quantile(MINSA$edad, 0.75)
RIC = Q3 - Q1
LI = Q1 - 1.5*RIC
LS = Q3 + 1.5*RIC
sum(MINSA$edad < LI) + sum(MINSA$edad > LS)
?boxplot
LI = Q1 - 1.5*RIC
LS = Q3 + 1.5*RIC
# Por definición
Q1 = quantile(MINSA$edad, 0.25)
Q3 = quantile(MINSA$edad, 0.75)
load(file.choose())
View(ENL2022)
# a).
prop.table(table(ENL2022$P429_8_1))
# b).
EstratoBajo = ENL2022[ENL2022$P412_1 == 5,]
EstratoAlto = ENL2022[ENL2022$P412_1 == 1,]
View(EstratoAlto)
View(EstratoBajo)
EstratoBajo = ENL2022[ENL2022$ESTRATOSOCIO == 5,]
EstratoAlto = ENL2022[ENL2022$ESTRATOSOCIO == 1,]
View(EstratoBajo)
# Calculamos la media de la cantidad de libros P412_1
mean(EstratoBajo$P412_1)
mean(EstratoAlto$P412_1)
# c).
EstratoMedioBajo = ENL2022[ENL2022$ESTRATOSOCIO == 4]
# c).
EstratoMedioBajo = ENL2022[ENL2022$ESTRATOSOCIO == 4,]
quantile(EstratoMedioBajo$P418,0.75)
# c).
# Forma Teórica
Q1 = quantile(ENL2022$P418, 0.25)
Q3 = quantile(ENL2022$P418, 0.75)
RIC = Q3 - Q1
LI = Q1 - 1.5*RIC
LS = Q3 + 1.5*RIC
sum(ENL2022$P418 < LI) + sum(ENL2022$P418 > LS)
# Forma Práctica $out
boxplot(ENL2022$P418)
# Forma Práctica $out
boxplot(ENL2022$P418, plot = F)
# Forma Práctica $out
boxplot(ENL2022$P418, plot = F)$out
# Forma Práctica $out
length(boxplot(ENL2022$P418, plot = F)$out)
# c).
# Forma Teórica
Q1 = quantile(ENL2022$P418, 0.25)
Q1
LI
quantile(EstratoMedioBajo$P314,0.75)
# e).
hist(ENL2022$P314)
# Edad
hist(ENL2022$P210_A)
IQR(ENL2022$P314)
IQR(ENL2022$P210_A)
# % Porcentaje
311/4443
# % Porcentaje
(311/4443)*100
View(ENL2022)
# f).
Mujeres = ENL2022[ENL2022$P209 == 2,]
library(DescTools)
Skew(Mujeres$P314)
# Coef. Asimetría Pearson
3*(mean(Mujeres$P314) - median(Mujeres$P314))/sd(Mujeres$P314)
Hombres = ENL2022[ENL2022$P209 == 1,]
# Coef. Asimetría Fisher
library(DescTools)
Skew(Hombres$P314) # 4.009978 Asimetría Positiva
# Coef. Asimetría Pearson
3*(mean(Hombres$P314) - median(Hombres$P314))/sd(Mujeres$P314)
# Coef. Asimetría Pearson
3*(mean(Hombres$P314) - median(Hombres$P314))/sd(Hombres$P314)
# Pregunta 2.
# a.
modeloX = lm(P418 ~ P412_1, data = ENL2022)
summary(modeloX)
modeloZ = lm(P418 ~ P412_2, data = ENL2022)
summary(modeloZ)
# b.
modeloMultiple = lm(P418 ~ P412_1 + P412_2 + P429_8_1, data = ENL2022)
summary(modeloMultiple)
# b.
modeloMultiple = lm(P418 ~ P412_1 + P412_2 + factor(P429_8_1),
data = ENL2022)
summary(modeloMultiple)
197.535 + 21.486*(3) + 3.015*(2)
shiny::runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
library(shinyjs)
install.packages("shinyjs")
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
shiny::runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
