abline(v = n*p - sqrt(n*p*(1-p)), col = "red", lwd = "2")
abline(v = n*p + sqrt(n*p*(1-p)), col = "red", lwd = "2")
n*p - sqrt(n*p*(1-p))
n*p + sqrt(n*p*(1-p))
sqrt(n*p*(1-p))
n*p
A = matrix(c(1,-1,0),1,3)
A
mu_X = matrix(c(5,6,8.5),3,1)
A%*%mu_X
sigma_X = matrix(c(1,-0.2,2.1,
-0.2,4,1.4,
2.1,1.4,12.5),3,3)
sigma_X
# v(Y) =
A%*%sigma_X%*%t(A)
# P(Y > 0) = 1 - P(Y <= 0)
1 - pnorm(0,-1,sqrt(5.4))
A = matrix(c(1,1,1),1,3)
mu_X = matrix(c(5,6,8.5),3,1)
# E(Y) = -1
A%*%mu_X
sigma_X = matrix(c(1,-0.2,2.1,
-0.2,4,1.4,
2.1,1.4,12.5),3,3)
# V(Y) = 5.4
A%*%sigma_X%*%t(A)
# P(Y > 20) = 1 - P(Y <= 20)
1 - pnorm(20,19.5,sqrt(24.1))
mu_p1 = matrix(c(5),1,1)
mu_p2 = matrix(c(6,8.5),1,2)
sigma_11 = matrix(c(1),1,1)
sigma_X = matrix(c(1,-0.2,2.1,
-0.2,4,1.4,
2.1,1.4,12.25),3,3)
A = matrix(c(1,-1,0),1,3)
mu_X = matrix(c(5,6,8.5),3,1)
# E(Y) = -1
A%*%mu_X
sigma_X = matrix(c(1,-0.2,2.1,
-0.2,4,1.4,
2.1,1.4,12.25),3,3)
# V(Y) = 5.4
A%*%sigma_X%*%t(A)
# P(Y > 0) = 1 - P(Y <= 0)
1 - pnorm(0,-1,sqrt(5.4))
A = matrix(c(1,1,1),1,3)
mu_X = matrix(c(5,6,8.5),3,1)
# E(Y) = 19.5
A%*%mu_X
sigma_X = matrix(c(1,-0.2,2.1,
-0.2,4,1.4,
2.1,1.4,12.5),3,3)
A = matrix(c(1,1,1),1,3)
mu_X = matrix(c(5,6,8.5),3,1)
# E(Y) = 19.5
A%*%mu_X
sigma_X = matrix(c(1,-0.2,2.1,
-0.2,4,1.4,
2.1,1.4,12.25),3,3)
# V(Y) = 24.1
A%*%sigma_X%*%t(A)
# P(Y > 20) = 1 - P(Y <= 20)
1 - pnorm(20,19.5,sqrt(24.1))
sigma_12 = matrix(c(-0.2,2.1),1,2)
sigma_12
sigma_22
sigma_22 = matrix(c(2.4,1.4,1.4,12.25),2,2)
sigma_22
sigma_11
mu_p2
mu_p2 = matrix(c(6,8.5),2,1)
x2 = matrix(c(6,8.5),2,1)
x2 = matrix(c(6.5,9.2),2,1)
x2 - mu_p2
mu_p1 + sigma_12%*%solve(sigma_22)%*%(x2 - mu_p2)
sigma_11 - sigma_12%*%solve(sigma_22)%*%t(sigma_12)
sqrt(0.5535714)
0.18+0.17+0.30
1 - 0.65
# b)
# E(X1) = np1
200*0.18
# E(X2) = np2
200*0.17
# E(X3) = np3
200*0.30
# E(X4) = np4
200*0.35
py = p1 + p2
# c)
# X1 y X2 -> Y
# Y = X1 + X2
p1 = 0.18
p2 = 0.17
py = p1 + p2
py
# X3 y X4 -> W
# W = X3 + X4
p3 = 0.30
p4 = 0.35
pw = p3 + p4
tabla <- matrix(c(25,15,20,20,30,20,15,10,20,30,15,15), nrow = 3, byrow = TRUE)
colnames(tabla) <- c("Acción", "Documental", "Romántica", "Comedia")
rownames(tabla) <- c("Básico", "Frecuente", "Premium")
# a)
t <- prop.table(tabla, margin = 2)
round(t,3)
t <- prop.table(tabla, margin = 2)
round(t,3)
barplot(t,
main = "Distribución del Clientes según contenido",
xlab = "Contenido Consumido",
ylab = "Proporción",
col = 1:2,
legend.text = rownames(t),
args.legend = list(x = "topleft", title = "Perfil Cliente",
cex=0.6, bty = "n"),
beside = TRUE,
ylim = c(0,1))
t <- prop.table(tabla, margin = 2)
round(t,3)
barplot(t,
main = "Distribución del Clientes según contenido",
xlab = "Contenido Consumido",
ylab = "Proporción",
col = 1:3,
legend.text = rownames(t),
args.legend = list(x = "topleft", title = "Perfil Cliente",
cex=0.6, bty = "n"),
beside = TRUE,
ylim = c(0,1))
tabla
addmargins(tabla,2)
addmargins(tabla,1)
addmargins(tabla,1)
x = c(75,65,50,45)
p = c(0.30,0.20,0.25,0.25)
chisq.test(x,p)
muestra = c(75,65,50,45)
probabilidades = c(0.30,0.20,0.25,0.25)
chisq.test(x = muestra, p = probabilidades)
addmargins(prop.table(tabla),1)
addmargins(tabla,1)
p1 = 0.31914894
p2 = 0.27659574
n = 240
p1 = 0.31914894
p2 = 0.27659574
n = 240
alfa = 0.05
IC <- function(p1,p2,n,alfa){
LI = p1 - p2 - qnorm(1 - alfa/2)*sqrt( (p1*(1-p1) + p2*(1-p2) + 2*p1*p2)/n )
LS = p1 - p2 + qnorm(1 - alfa/2)*sqrt( (p1*(1-p1) + p2*(1-p2) + 2*p1*p2)/n )
c(LI,LS)
}
IC(p1,p2mn,alfa)
p1 = 0.31914894
p2 = 0.27659574
n = 240
alfa = 0.05
IC <- function(p1,p2,n,alfa){
LI = p1 - p2 - qnorm(1 - alfa/2)*sqrt( (p1*(1-p1) + p2*(1-p2) + 2*p1*p2)/n )
LS = p1 - p2 + qnorm(1 - alfa/2)*sqrt( (p1*(1-p1) + p2*(1-p2) + 2*p1*p2)/n )
c(LI,LS)
}
IC(p1,p2,n,alfa)
chisq.test(tabla)
datos = file.choose(read.csv())
datos = read.csv(file.choose())
colnames(datos)
# a)
modeloA = lm(dpm ~ turno + material + temperatura + preventivo, datos)
modeloA
# a)
modeloA = lm(dpm ~ factor(turno) + factor(material) + temperatura + preventivo, datos)
modeloA
summary(modeloA)
# F-statistic: 0.4124 on 5 and 144 DF,  p-value: 0.8396
qf(0.95,5,144)
# b)
modeloB = lm(dpm ~ operario + factor(maquina) + velocidad + presion, datos)
summary(modeloB)
# d)
plot(modeloB)
View(datos)
# e)
predict(modeloB, newdata = data.frame(velocidad = 50,
presion = 100,
temperatura = 75,
preventivo = 30,
operario = "senior",
turno = "noche",
maquina = "C",
material = "M2",
))
View(datos)
predict(modeloB, newdata = data.frame(velocidad = 50,
presion = 100,
temperatura = 75,
preventivo = 30,
operario = "senior",
turno = "noche",
maquina = "C",
material = "M2",
))
View(datos)
data.frame(velocidad = 50,
presion = 100,
temperatura = 75,
preventivo = 30,
operario = "senior",
turno = "noche",
maquina = "C",
material = "M2",
)
data.frame(velocidad = 50,
presion = 100,
temperatura = 75,
preventivo = 30,
operario = "senior",
turno = "noche",
maquina = "C",
material = "M2",
)
predict(modeloB, newdata = data.frame(velocidad = 50,
presion = 100,
temperatura = 75,
preventivo = 30,
operario = "senior",
turno = "noche",
maquina = "C",
material = "M2"
))
modeloB = lm(dpm ~ operario + factor(maquina) + velocidad + presion, datos)
summary(modeloB)
tabla <- matrix(c(25,15,20,20,30,20,15,10,20,30,15,15), nrow = 3, byrow = TRUE)
colnames(tabla) <- c("Acción", "Documental", "Romántica", "Comedia")
rownames(tabla) <- c("Básico", "Frecuente", "Premium")
# a)
t <- prop.table(tabla, margin = 2)
t
round(t,3)
barplot(t,
main = "Distribución del Clientes según contenido",
xlab = "Contenido Consumido",
ylab = "Proporción",
col = 1:3,
legend.text = rownames(t),
args.legend = list(x = "topleft", title = "Perfil Cliente",
cex=0.6, bty = "n"),
beside = TRUE,
ylim = c(0,1))
chisq.test(tabla)
# c)
addmargins(prop.table(tabla),1)
IC <- function(p1,p2,n,alfa){
LI = p1 - p2 - qnorm(1 - alfa/2)*sqrt( (p1*(1-p1) + p2*(1-p2) + 2*p1*p2)/n )
LS = p1 - p2 + qnorm(1 - alfa/2)*sqrt( (p1*(1-p1) + p2*(1-p2) + 2*p1*p2)/n )
c(LI,LS)
}
IC(p1,p2,n,alfa)
IC(p1,p2,n,alfa)
muestra = c(25,15,20,20)
probabilidades = c(0.30,0.20,0.25,0.25)
muestra = c(25,15,20,20)
probabilidades = c(0.30,0.20,0.25,0.25)
chisq.test(x = muestra, p = probabilidades)
colnames(datos)
# a)
modeloA = lm(dpm ~ factor(turno) + factor(material) + temperatura + preventivo, datos)
# a)
modeloA = lm(dpm ~ factor(turno) + factor(material) +
temperatura + preventivo, datos)
summary(modeloA)
qf(0.95,5,144)
# b)
modeloB = lm(dpm ~ operario + factor(maquina) + velocidad + presion, datos)
summary(modeloB)
# d)
plot(modeloB)
# P(X3 > 5) = 1 - P(X <= 5)
1 - pnorm(5,7,3)
mu_p1 = matrix(c(4),1,1)
mu_p2 = matrix(c(10,7),2,1)
sigma12 = matrix(c(-2,0.03),1,2)
sigma22 = matrix(c(16,4,4,9),2,2)
x2 = matrix(c(9800,5500),2,1)
mu_p1 + sigma12%*%solve(sigma22)%*%(x2 - mu_p2)
mu_p1 = matrix(c(4),1,1)
mu_p2 = matrix(c(10,7),2,1)
sigma12 = matrix(c(-2,0.03),1,2)
sigma22 = matrix(c(16,4,4,9),2,2)
x2 = matrix(c(9.8,5.5),2,1)
mu_p1 + sigma12%*%solve(sigma22)%*%(x2 - mu_p2)
# -1017.986
# c)
sigma11 = matrix(c(4),1,1)
sigma11 + sigma12%*%solve(sigma22)%*%t(sigma12)
# P(X1 > 5 | X2 = 9.8, X3= 5.5) = 1 - P(X1 <= 5 | X2 = 9.8, X3= 5.5)
1 - pnorm(5,3.928937,sqrt(4.285113))
A = matrix(c(0,1,-1),1,3)
mu = matrix(c(4,10,7),3,1)
A%*%mu
# V(X)
sigma = matrix(c(4,-2,0.03,-2,16,4,0.03,4,9),3,3)
A%*%sigma%*%t(A)
# P(Y > 0) = 1 - P(Y <= 0)
1 - pnorm(0,3,sqrt(17))
# Pregunta 8
datos = read.csv(file.choose())
colnames(datos)
modelo1 = lm(Y ~ X1 + X2 + X3, datos)
modelo1 = lm(Y ~ X1 + X2 + X3 + X4, datos)
modelo2 = lm(Y ~ X1 + X2 + X3, datos)
# a)
summary(modelo1)
# b)
predict(modelo1, newdata = data.frame(X1 = 5000,
X2= 3,
X3 = 30,
X4 = 300))
View(datos)
predict(modelo1, newdata = data.frame(X1 = 5,
X2= 3,
X3 = 30,
X4 = 300))
# c)
summary(modelo1)
# F-statistic: 54.41 on 4 and 995 DF,  p-value: < 2.2e-16
qf(0.95,4,995)
# e)
modelo1 = lm(Y ~ X1 + X2 + X3 + X4, datos)
modelo2 = lm(Y ~ X1 + X2 + X3, datos)
summary(modelo1)
summary(modelo2)
# f)
cor(datos$X3,datos$Y)
# g)
by(datos$Y, datos$X6, mean)
modelo9 = lm(y ~ X1 + X2 + X3 + X4 + factor(X5) + factor(X6),datos)
modelo9 = lm(Y ~ X1 + X2 + X3 + X4 + factor(X5) + factor(X6),datos)
# a)
summary(modelo9)
# b)
# Contraste de Adecuación del Modelo de Regresión Lineal
# Ho: B1 = B2 = B3 = B4 = B5 = B6 = B7 = 0
# Ha: Existe al menos un Bj diferente de cero.
# p-value: < 2.2e-16 < 0.05
# F-statistic: 151.7 on 7 and 992 DF
qf(0.95,7,992)
View(datos)
predict(modelo1, newdata = data.frame(X1 = 5.9,
X2= 2.5,
X3 = 38,
X4 = 550,
X5 = "Perro",
X6 = "Ocasional"))
predict(modelo9, newdata = data.frame(X1 = 5.9,
X2= 2.5,
X3 = 38,
X4 = 550,
X5 = "Perro",
X6 = "Ocasional"))
# e)
summary(modelo9)
# e)
plot(modelo9)
# (X1,X2,X3,X4)T ~ Multinomial(n = 100, p1 = 0.30, p2 = 0.27, p3 = 0.23, p4 = 0.20)
# X1 + X2 ~ Binomial (n = 100, p =  p1 + p2)
p1 = 0.30
p2 = 0.27
# P(X1 + X2 > 60) = 1 - P(X1 + X2 <= 60)
1 - pbinom(60,100,p1+p2)
p1 = 0.30
p2 = 0.27
p3 = 0.23
p4 = 0.20
# b)
# P(X1 | (X1 U X2 U X3)) = P(X1 n (X1 U X2 U X3))/P(X1 U X2 U X3)
# P(X1 | (X1 U X2 U X3)) = P(X1)/P(X1 U X2 U X3)
# P(X1 | (X1 U X2 U X3)) = p1/(p1+p2+p3)
p1/(p1+p2+p3)
# Y: Número de clientes que prefieren pagar con Tarjeta de Crédito
# si se sabe que 74 pagan con medios de pago distintos a efectivo
# Y ~ Binomial(n = 74, p = 0.375)
n = 74
p = 0.375
n*p
# c)
# C = 0.5X1 + 0.5X2 + 0.2X3 + 0.8X4
A = matrix(c(0.5,0.5,0.2,0.8),1,4)
# Y: Número de clientes que prefieren pagar con Tarjeta de Crédito
# si se sabe que 74 pagan con medios de pago distintos a efectivo
# Y ~ Binomial(n = 74, p = 0.375)
n = 74
py = 0.375
# Y: Número de clientes que prefieren pagar con Tarjeta de Crédito
# si se sabe que 74 pagan con medios de pago distintos a efectivo
# Y ~ Binomial(n = 74, p = 0.375)
ny = 74
py = 0.375
ny*py
n = 100
p = c(0.30,0.27,0.23,0.20)
A = matrix(c(0.5,0.5,0.2,0.8),1,4)
mu = matrix(n*p,4,1)
# E(C)
A%*%mu
sigma = -n*p%*%t(p)
sigma
diag(sigma) = n*p*(1-p)
sigma
# V(C)
A%*%sigma%*%t(A)
tabla= matrix(c(50,40,30,20,
60,45,35,25,
30,35,40,40),3,4,byrow=TRUE)
Edad<-c("18-30","31-50","50-mas")
Metodo<-c("TarjetaCredito","TarjetaDebito","Transeferencia","Efectivo")
dimnames(tabla)= list(Edad=Edad,Metodo=Metodo)
prop.table(tabla,1)
t <- prop.table(tabla, margin = 2)
round(t,3)
barplot(t,
main = "Distribución de Edad según Medio de Pago",
xlab = "Contenido Consumido",
ylab = "Proporción",
col = 1:4,
legend.text = rownames(t),
args.legend = list(x = "topleft", title = "Perfil Cliente",
cex=0.6, bty = "n"),
beside = TRUE,
ylim = c(0,1))
t <- prop.table(tabla, margin = 2)
round(t,3)
barplot(t,
main = "Distribución de Edad según Medio de Pago",
xlab = "Contenido Consumido",
ylab = "Proporción",
col = 1:3,
legend.text = rownames(t),
args.legend = list(x = "topleft", title = "Perfil Cliente",
cex=0.6, bty = "n"),
beside = TRUE,
ylim = c(0,1))
prop.table(tabla,2)
prop.table(tabla,2)
t <- prop.table(tabla, margin = 2)
round(t,3)
barplot(t,
main = "Distribución de Rango Etareo según Medio de Pago",
xlab = "Contenido Consumido",
ylab = "Proporción",
col = 1:3,
legend.text = rownames(t),
args.legend = list(x = "topleft", title = "Rango Etareo",
cex=0.6, bty = "n"),
beside = TRUE,
ylim = c(0,1))
# La distribución de rangos etareos para cada medio de pago no es
# la misma, por lo tanto se puede considerar que existe asociación
# entre estas dos variables
chisq.test(tabla)
# Tabla de Frecuencias Esperadas
chisq.test(tabla)$expected
# Valor Critico
qchisq(0.95,6)
# f)
tabla
# f)
sum(tabla)
sum(tabla)
addmargins(tabla)
p1 = 140/450
p2 = 120/450
n = 450
alfa = 0.05
IC <- function(p1,p2,n,alfa){
LI = p1 - p2 - qnorm(1 - alfa/2)*sqrt( (p1*(1-p1) + p2*(1-p2) + 2*p1*p2)/n )
LS = p1 - p2 + qnorm(1 - alfa/2)*sqrt( (p1*(1-p1) + p2*(1-p2) + 2*p1*p2)/n )
c(LI,LS)
}
IC
IC(p1,p2,n,alfa)
p1 = 50/140
p2 = 60/165
# Poblaciones Independientes
n1 = 140
n2 = 165
alfa = 0.05
IC_indep <- function(p1,p2,n1,n2,alfa){
LI = p1 - p2 - qnorm(1 - alfa/2)*sqrt(p1*(1-p1)/n1 + p2*(1-p2)/n2)
LS = p1 - p2 + qnorm(1 - alfa/2)*sqrt(p1*(1-p1)/n1 + p2*(1-p2)/n2)
c(LI,LS)
}
IC_indep(p1,p2,n1,n2,alfa)
probabilidades = c(0.30, 0.27, 0.23, 0.20)
x = c(140, 120, 105, 85)
chisq.test(x,probabilidades)
chisq.test(x = muestra, p = probabilidades)
muestra = c(140, 120, 105, 85)
probabilidades = c(0.30, 0.27, 0.23, 0.20)
chisq.test(x = muestra, p = probabilidades)
# Estadístico de Prueba
# X-squared = 0.50322
qchisq(0.95,3)
shiny::runApp('GitHub/data-mining-learning-project')
shiny::runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
shiny::runApp('GitHub/data-mining-learning-project')
runApp('GitHub/data-mining-learning-project')
